{"version":3,"sources":["../../src/data/resolve.js"],"names":["invariant","require","findContentsUniq","findChildrenDuplicates","TextureObjects","extractImages","uniqImages","resolve","dataTree","imagesToPreload","contentsMeta","contentsVDOM","map","vdom","resolveRec","data","fboId","parentContext","parentFbos","dataUniforms","uniforms","dataChildren","children","dataContents","contents","preload","dataRest","parentContextVDOM","genFboId","fboIdCounter","indexOf","shared","childrenContext","context","concat","contextVDOM","contextFbos","contextChildren","toRecord","uniform","child","i","addToCollection","length","Framebuffer","childrenFbos","allFbos","recorded","forEach","push","unshift","opts","id","withOpts","Content","module","exports"],"mappings":"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","file":"resolve.js","sourcesContent":["const invariant = require(\"invariant\");\n\nconst findContentsUniq = require(\"./findContentsUniq\");\nconst findChildrenDuplicates = require(\"./findChildrenDuplicates\");\nconst TextureObjects = require(\"./TextureObjects\");\nconst extractImages = require(\"./extractImages\");\nconst uniqImages = require(\"./uniqImages\");\n\n///// resolve: takes the output of fill(build(*)) to generate the final data tree\n// The algorithm simplifies the data tree to use shared framebuffers if some VDOM is duplicated in the tree (e.g: content / GL.Node)\n\nfunction resolve(dataTree) {\n  let imagesToPreload = [];\n\n  // contents are view/canvas/image/video to be rasterized \"globally\"\n  const contentsMeta = findContentsUniq(dataTree);\n  const contentsVDOM = contentsMeta.map(({ vdom }) => vdom);\n\n  // Recursively \"resolve\" the data to assign fboId and factorize duplicate uniforms to shared uniforms.\n  function resolveRec(data, fboId, parentContext, parentFbos) {\n    const {\n      uniforms: dataUniforms,\n      children: dataChildren,\n      contents: dataContents,\n      preload,\n      ...dataRest\n    } = data;\n    const uniforms = { ...dataUniforms };\n    const parentContextVDOM = parentContext.map(({ vdom }) => vdom);\n\n    // A function to generate a free FBO id for this node\n    const genFboId = (fboIdCounter => () => {\n      fboIdCounter++;\n      while (\n        fboIdCounter === fboId || // fbo should not take the current one\n        parentFbos.indexOf(fboIdCounter) !== -1 // ensure fbo is not already taken in parents\n      )\n        fboIdCounter++;\n      return fboIdCounter;\n    })(-1);\n\n    // shared contains all nodes that are contains in more than one direct children.\n    const shared = findChildrenDuplicates(data, parentContextVDOM);\n\n    // We assign fboIds to shared\n    const childrenContext = shared.map(({ vdom }) => {\n      const fboId = genFboId();\n      return { vdom, fboId };\n    });\n\n    // We accumulate into context the childrenContext and the parentContext\n    const context = parentContext.concat(childrenContext);\n    const contextVDOM = context.map(({ vdom }) => vdom);\n    const contextFbos = context.map(({ fboId }) => fboId);\n\n    // contextChildren and children are field to fill for this node\n    // We traverse the dataChildren to resolve where each child should go:\n    // either we create a new child, a we create context child or we use an existing parent context\n    const contextChildren = [];\n    const children = [];\n\n    const toRecord = dataChildren.concat(shared).map(child => {\n      const { uniform, vdom, data } = child;\n      let i = contextVDOM.indexOf(vdom);\n      let fboId, addToCollection;\n      if (i === -1) {\n        fboId = genFboId();\n        addToCollection = children;\n      } else {\n        fboId = context[i].fboId;\n        if (i >= parentContext.length) {\n          // is a new context children\n          addToCollection = contextChildren;\n        }\n      }\n      if (uniform) uniforms[uniform] = TextureObjects.Framebuffer(fboId);\n      return { data, fboId, addToCollection };\n    });\n\n    const childrenFbos = toRecord.map(({ fboId }) => fboId);\n    const allFbos = parentFbos.concat(contextFbos).concat(childrenFbos);\n\n    const recorded = [];\n    toRecord.forEach(({ data, fboId, addToCollection }) => {\n      if (recorded.indexOf(fboId) === -1) {\n        recorded.push(fboId);\n        if (addToCollection)\n          addToCollection.unshift(resolveRec(data, fboId, context, allFbos));\n      }\n    });\n\n    dataContents.forEach(({ uniform, vdom, opts }) => {\n      const id = contentsVDOM.indexOf(vdom);\n      invariant(id !== -1, \"contents was discovered by findContentsMeta\");\n      uniforms[uniform] = TextureObjects.withOpts(\n        TextureObjects.Content(id),\n        opts\n      );\n    });\n\n    // Check images to preload\n    if (preload) {\n      imagesToPreload = imagesToPreload.concat(extractImages(dataUniforms));\n    }\n\n    return {\n      ...dataRest, // eslint-disable-line no-undef\n      uniforms,\n      contextChildren,\n      children,\n      fboId\n    };\n  }\n\n  return {\n    data: resolveRec(dataTree, -1, [], []),\n    contentsVDOM,\n    imagesToPreload: uniqImages(imagesToPreload)\n  };\n}\n\nmodule.exports = resolve;\n"]}