{"version":3,"sources":["../../src/data/duckTypeUniformValue.js"],"names":["React","require","isAnimated","duckTypeUniformValue","obj","typ","isNaN","isFinite","Error","uri","data","shape","stride","Array","length","foundAnimated","foundVDOM","foundNumber","foundBoolean","i","val","t","isValidElement","foundNumberOrBooleanOrAnimated","module","exports"],"mappings":"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","file":"duckTypeUniformValue.js","sourcesContent":["const React = require(\"react\");\nconst isAnimated = require(\"../isAnimated\");\n\n// infer the uniform value type and validate it (throw error if invalid)\n\nfunction duckTypeUniformValue(obj) {\n  let typ = typeof obj;\n\n  if (typ === \"number\") {\n    if (isNaN(obj) || !isFinite(obj))\n      throw new Error(\"invalid number: '\" + obj + \"'\");\n    return typ;\n  }\n\n  if (typ === \"boolean\") {\n    return typ;\n  }\n\n  if (typ === \"string\") {\n    return typ;\n  }\n\n  if (typ === \"undefined\") {\n    return null;\n  }\n\n  if (typ === \"object\") {\n    if (!obj) {\n      return null;\n    }\n\n    if (typeof obj.uri === \"string\") {\n      return \"{uri}\";\n    }\n\n    if (obj.data && obj.shape && obj.stride) {\n      return \"ndarray\";\n    }\n\n    if (obj instanceof Array) {\n      const length = obj.length;\n      if (!length) throw new Error(\"array is empty\");\n      let foundAnimated = false;\n      let foundVDOM = false;\n      let foundNumber = false;\n      let foundBoolean = false;\n      for (let i = 0; i < length; i++) {\n        const val = obj[i];\n        const t = typeof val;\n        switch (t) {\n          case \"object\":\n            if (val && isAnimated(val)) foundAnimated = true;\n            else if (val && React.isValidElement(val)) foundVDOM = true;\n            else if (val instanceof Array) return duckTypeUniformValue(val);\n            else\n              throw new Error(\n                \"at index \" + i + \", Unrecognized object: '\" + val + \"'\"\n              );\n            break;\n\n          case \"number\":\n            if (isNaN(val) || !isFinite(val))\n              throw new Error(\n                \"at index \" + i + \", invalid number: '\" + val + \"'\"\n              );\n            foundNumber = true;\n            break;\n\n          case \"boolean\":\n            foundBoolean = true;\n            break;\n\n          default:\n            throw new Error(\"at index \" + i + \", Unrecognized object: \" + val);\n        }\n      }\n\n      const foundNumberOrBooleanOrAnimated =\n        foundNumber || foundBoolean || foundAnimated;\n      if (foundNumberOrBooleanOrAnimated && foundVDOM) {\n        throw new Error(\n          \"Invalid array. Found both VDOM value and numbers/booleans/animated\"\n        );\n      }\n\n      if (foundVDOM) {\n        return \"vdom[]\";\n      }\n      if (foundAnimated) {\n        return \"animated[]\";\n      }\n      if (foundNumber) {\n        return \"number[]\";\n      }\n      if (foundBoolean) {\n        return \"boolean[]\";\n      }\n    }\n\n    if (isAnimated(obj)) {\n      return \"animated\";\n    }\n\n    if (React.isValidElement(obj)) {\n      return \"vdom\";\n    }\n  }\n\n  throw new Error(\"Unrecognized object: \" + obj);\n}\n\nmodule.exports = duckTypeUniformValue;\n"]}